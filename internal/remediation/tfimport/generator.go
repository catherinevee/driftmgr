package tfimport

import (
	"fmt"
	"strings"

	"github.com/catherinevee/driftmgr/pkg/models"
)

// ImportCommand represents a Terraform import command
type ImportCommand struct {
	ResourceType string `json:"resource_type"`
	ResourceName string `json:"resource_name"`
	ResourceID   string `json:"resource_id"`
	Provider     string `json:"provider"`
	Command      string `json:"command"`
	Module       string `json:"module,omitempty"`
	Workspace    string `json:"workspace,omitempty"`
}

// ImportGenerator generates Terraform import commands for resources
type ImportGenerator struct {
	providerMappings map[string]map[string]ImportMapping
}

// ImportMapping defines how to import a specific resource type
type ImportMapping struct {
	ResourceType   string
	IDFormat       string
	IDExtractor    func(resource models.Resource) string
	RequiresRegion bool
	CustomCommand  func(resource models.Resource) string
}

// NewImportGenerator creates a new import command generator
func NewImportGenerator() *ImportGenerator {
	gen := &ImportGenerator{
		providerMappings: make(map[string]map[string]ImportMapping),
	}

	// Initialize AWS mappings
	gen.initializeAWSMappings()
	// Initialize Azure mappings
	gen.initializeAzureMappings()
	// Initialize GCP mappings
	gen.initializeGCPMappings()

	return gen
}

// GenerateImportCommand generates a Terraform import command for a resource
func (g *ImportGenerator) GenerateImportCommand(resource models.Resource) (*ImportCommand, error) {
	provider := strings.ToLower(resource.Provider)
	resourceType := resource.Type

	// Get provider mappings
	providerMappings, exists := g.providerMappings[provider]
	if !exists {
		return nil, fmt.Errorf("unsupported provider: %s", provider)
	}

	// Find mapping for resource type
	mapping, exists := providerMappings[resourceType]
	if !exists {
		// Try with provider prefix
		mapping, exists = providerMappings[provider+"_"+resourceType]
		if !exists {
			return nil, fmt.Errorf("unsupported resource type %s for provider %s", resourceType, provider)
		}
	}

	// Generate import command
	var resourceID string
	if mapping.IDExtractor != nil {
		resourceID = mapping.IDExtractor(resource)
	} else if mapping.IDFormat != "" {
		resourceID = g.formatResourceID(mapping.IDFormat, resource)
	} else {
		resourceID = resource.ID
	}

	// Generate Terraform resource name (sanitized)
	resourceName := g.sanitizeResourceName(resource.Name)
	if resourceName == "" {
		resourceName = g.sanitizeResourceName(resource.ID)
	}

	// Build the import command
	var command string
	if mapping.CustomCommand != nil {
		command = mapping.CustomCommand(resource)
	} else {
		command = fmt.Sprintf("terraform import %s.%s %s",
			mapping.ResourceType,
			resourceName,
			resourceID,
		)
	}

	return &ImportCommand{
		ResourceType: mapping.ResourceType,
		ResourceName: resourceName,
		ResourceID:   resourceID,
		Provider:     provider,
		Command:      command,
	}, nil
}

// GenerateBulkImportScript generates a script with multiple import commands
func (g *ImportGenerator) GenerateBulkImportScript(resources []models.Resource) (string, error) {
	var script strings.Builder

	script.WriteString("#!/bin/bash\n")
	script.WriteString("# Terraform Import Script\n")
	script.WriteString("# Generated by DriftMgr\n\n")

	script.WriteString("set -e\n\n")
	script.WriteString("echo 'Starting Terraform import process...'\n\n")

	// Group resources by provider
	providerGroups := make(map[string][]models.Resource)
	for _, resource := range resources {
		provider := strings.ToLower(resource.Provider)
		providerGroups[provider] = append(providerGroups[provider], resource)
	}

	// Generate imports by provider
	for provider, providerResources := range providerGroups {
		script.WriteString(fmt.Sprintf("\n# %s Resources\n", strings.ToUpper(provider)))
		script.WriteString(fmt.Sprintf("echo 'Importing %s resources...'\n\n", provider))

		for _, resource := range providerResources {
			cmd, err := g.GenerateImportCommand(resource)
			if err != nil {
				script.WriteString(fmt.Sprintf("# Skipped: %s - %v\n", resource.ID, err))
				continue
			}

			script.WriteString(fmt.Sprintf("echo 'Importing %s: %s'\n", resource.Type, resource.Name))
			script.WriteString(cmd.Command + "\n\n")
		}
	}

	script.WriteString("echo 'Import process completed!'\n")

	return script.String(), nil
}

// initializeAWSMappings sets up AWS resource import mappings
func (g *ImportGenerator) initializeAWSMappings() {
	g.providerMappings["aws"] = map[string]ImportMapping{
		"aws_instance": {
			ResourceType: "aws_instance",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"ec2_instance": {
			ResourceType: "aws_instance",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"aws_s3_bucket": {
			ResourceType: "aws_s3_bucket",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"s3_bucket": {
			ResourceType: "aws_s3_bucket",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_security_group": {
			ResourceType: "aws_security_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"security_group": {
			ResourceType: "aws_security_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"aws_vpc": {
			ResourceType: "aws_vpc",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"vpc": {
			ResourceType: "aws_vpc",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"aws_subnet": {
			ResourceType: "aws_subnet",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"subnet": {
			ResourceType: "aws_subnet",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"aws_rds_instance": {
			ResourceType: "aws_db_instance",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"rds_instance": {
			ResourceType: "aws_db_instance",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_lambda_function": {
			ResourceType: "aws_lambda_function",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"lambda_function": {
			ResourceType: "aws_lambda_function",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_iam_role": {
			ResourceType: "aws_iam_role",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"iam_role": {
			ResourceType: "aws_iam_role",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_iam_policy": {
			ResourceType: "aws_iam_policy",
			IDExtractor: func(r models.Resource) string {
				if arn, ok := r.Properties["arn"].(string); ok {
					return arn
				}
				return r.ID
			},
		},
		"iam_policy": {
			ResourceType: "aws_iam_policy",
			IDExtractor: func(r models.Resource) string {
				if arn, ok := r.Properties["arn"].(string); ok {
					return arn
				}
				return r.ID
			},
		},
		"aws_iam_user": {
			ResourceType: "aws_iam_user",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"iam_user": {
			ResourceType: "aws_iam_user",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_dynamodb_table": {
			ResourceType: "aws_dynamodb_table",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"dynamodb_table": {
			ResourceType: "aws_dynamodb_table",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_eks_cluster": {
			ResourceType: "aws_eks_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"eks_cluster": {
			ResourceType: "aws_eks_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_ecs_cluster": {
			ResourceType: "aws_ecs_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"ecs_cluster": {
			ResourceType: "aws_ecs_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_ecs_service": {
			ResourceType: "aws_ecs_service",
			IDExtractor: func(r models.Resource) string {
				cluster := r.Properties["cluster"].(string)
				return fmt.Sprintf("%s/%s", cluster, r.Name)
			},
		},
		"aws_elb": {
			ResourceType: "aws_elb",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"elb": {
			ResourceType: "aws_elb",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"aws_alb": {
			ResourceType: "aws_lb",
			IDExtractor: func(r models.Resource) string {
				if arn, ok := r.Properties["arn"].(string); ok {
					return arn
				}
				return r.Name
			},
		},
		"aws_route53_zone": {
			ResourceType: "aws_route53_zone",
			IDExtractor: func(r models.Resource) string {
				if zoneID, ok := r.Properties["zone_id"].(string); ok {
					return zoneID
				}
				return r.ID
			},
		},
		"route53_zone": {
			ResourceType: "aws_route53_zone",
			IDExtractor: func(r models.Resource) string {
				if zoneID, ok := r.Properties["zone_id"].(string); ok {
					return zoneID
				}
				return r.ID
			},
		},
		"aws_sns_topic": {
			ResourceType: "aws_sns_topic",
			IDExtractor: func(r models.Resource) string {
				if arn, ok := r.Properties["arn"].(string); ok {
					return arn
				}
				return r.ID
			},
		},
		"sns_topic": {
			ResourceType: "aws_sns_topic",
			IDExtractor: func(r models.Resource) string {
				if arn, ok := r.Properties["arn"].(string); ok {
					return arn
				}
				return r.ID
			},
		},
		"aws_sqs_queue": {
			ResourceType: "aws_sqs_queue",
			IDExtractor: func(r models.Resource) string {
				if url, ok := r.Properties["url"].(string); ok {
					return url
				}
				return r.Name
			},
		},
		"sqs_queue": {
			ResourceType: "aws_sqs_queue",
			IDExtractor: func(r models.Resource) string {
				if url, ok := r.Properties["url"].(string); ok {
					return url
				}
				return r.Name
			},
		},
		"aws_kms_key": {
			ResourceType: "aws_kms_key",
			IDExtractor: func(r models.Resource) string {
				if keyID, ok := r.Properties["key_id"].(string); ok {
					return keyID
				}
				return r.ID
			},
		},
		"kms_key": {
			ResourceType: "aws_kms_key",
			IDExtractor: func(r models.Resource) string {
				if keyID, ok := r.Properties["key_id"].(string); ok {
					return keyID
				}
				return r.ID
			},
		},
	}
}

// initializeAzureMappings sets up Azure resource import mappings
func (g *ImportGenerator) initializeAzureMappings() {
	g.providerMappings["azure"] = map[string]ImportMapping{
		"azurerm_virtual_machine": {
			ResourceType: "azurerm_virtual_machine",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"virtual_machine": {
			ResourceType: "azurerm_virtual_machine",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_resource_group": {
			ResourceType: "azurerm_resource_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"resource_group": {
			ResourceType: "azurerm_resource_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_storage_account": {
			ResourceType: "azurerm_storage_account",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"storage_account": {
			ResourceType: "azurerm_storage_account",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_virtual_network": {
			ResourceType: "azurerm_virtual_network",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"virtual_network": {
			ResourceType: "azurerm_virtual_network",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_subnet": {
			ResourceType: "azurerm_subnet",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"subnet": {
			ResourceType: "azurerm_subnet",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_network_security_group": {
			ResourceType: "azurerm_network_security_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"network_security_group": {
			ResourceType: "azurerm_network_security_group",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_sql_database": {
			ResourceType: "azurerm_sql_database",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"sql_database": {
			ResourceType: "azurerm_sql_database",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_sql_server": {
			ResourceType: "azurerm_sql_server",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"sql_server": {
			ResourceType: "azurerm_sql_server",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_kubernetes_cluster": {
			ResourceType: "azurerm_kubernetes_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"kubernetes_cluster": {
			ResourceType: "azurerm_kubernetes_cluster",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_app_service": {
			ResourceType: "azurerm_app_service",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"app_service": {
			ResourceType: "azurerm_app_service",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_function_app": {
			ResourceType: "azurerm_function_app",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"function_app": {
			ResourceType: "azurerm_function_app",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_cosmosdb_account": {
			ResourceType: "azurerm_cosmosdb_account",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"cosmosdb_account": {
			ResourceType: "azurerm_cosmosdb_account",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"azurerm_key_vault": {
			ResourceType: "azurerm_key_vault",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"key_vault": {
			ResourceType: "azurerm_key_vault",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
	}
}

// initializeGCPMappings sets up GCP resource import mappings
func (g *ImportGenerator) initializeGCPMappings() {
	g.providerMappings["gcp"] = map[string]ImportMapping{
		"google_compute_instance": {
			ResourceType: "google_compute_instance",
			IDExtractor: func(r models.Resource) string {
				zone := r.Properties["zone"].(string)
				return fmt.Sprintf("projects/%s/zones/%s/instances/%s",
					r.Properties["project"].(string), zone, r.Name)
			},
		},
		"compute_instance": {
			ResourceType: "google_compute_instance",
			IDExtractor: func(r models.Resource) string {
				zone := r.Properties["zone"].(string)
				return fmt.Sprintf("%s/%s", zone, r.Name)
			},
		},
		"google_storage_bucket": {
			ResourceType: "google_storage_bucket",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"storage_bucket": {
			ResourceType: "google_storage_bucket",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_compute_network": {
			ResourceType: "google_compute_network",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"compute_network": {
			ResourceType: "google_compute_network",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_compute_subnetwork": {
			ResourceType: "google_compute_subnetwork",
			IDExtractor: func(r models.Resource) string {
				region := r.Properties["region"].(string)
				return fmt.Sprintf("projects/%s/regions/%s/subnetworks/%s",
					r.Properties["project"].(string), region, r.Name)
			},
		},
		"compute_subnetwork": {
			ResourceType: "google_compute_subnetwork",
			IDExtractor: func(r models.Resource) string {
				region := r.Properties["region"].(string)
				return fmt.Sprintf("%s/%s", region, r.Name)
			},
		},
		"google_compute_firewall": {
			ResourceType: "google_compute_firewall",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"compute_firewall": {
			ResourceType: "google_compute_firewall",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_sql_database_instance": {
			ResourceType: "google_sql_database_instance",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"sql_database_instance": {
			ResourceType: "google_sql_database_instance",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_container_cluster": {
			ResourceType: "google_container_cluster",
			IDExtractor: func(r models.Resource) string {
				location := r.Properties["location"].(string)
				return fmt.Sprintf("projects/%s/locations/%s/clusters/%s",
					r.Properties["project"].(string), location, r.Name)
			},
		},
		"container_cluster": {
			ResourceType: "google_container_cluster",
			IDExtractor: func(r models.Resource) string {
				location := r.Properties["location"].(string)
				return fmt.Sprintf("%s/%s", location, r.Name)
			},
		},
		"google_cloudfunctions_function": {
			ResourceType: "google_cloudfunctions_function",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"cloudfunctions_function": {
			ResourceType: "google_cloudfunctions_function",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_pubsub_topic": {
			ResourceType: "google_pubsub_topic",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"pubsub_topic": {
			ResourceType: "google_pubsub_topic",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_pubsub_subscription": {
			ResourceType: "google_pubsub_subscription",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"pubsub_subscription": {
			ResourceType: "google_pubsub_subscription",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_bigquery_dataset": {
			ResourceType: "google_bigquery_dataset",
			IDExtractor: func(r models.Resource) string {
				return fmt.Sprintf("projects/%s/datasets/%s",
					r.Properties["project"].(string), r.Name)
			},
		},
		"bigquery_dataset": {
			ResourceType: "google_bigquery_dataset",
			IDExtractor: func(r models.Resource) string {
				return r.Name
			},
		},
		"google_kms_crypto_key": {
			ResourceType: "google_kms_crypto_key",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
		"kms_crypto_key": {
			ResourceType: "google_kms_crypto_key",
			IDExtractor: func(r models.Resource) string {
				return r.ID
			},
		},
	}
}

// formatResourceID formats a resource ID based on a template
func (g *ImportGenerator) formatResourceID(format string, resource models.Resource) string {
	result := format

	// Replace placeholders with resource properties
	result = strings.ReplaceAll(result, "{id}", resource.ID)
	result = strings.ReplaceAll(result, "{name}", resource.Name)
	result = strings.ReplaceAll(result, "{region}", resource.Region)
	result = strings.ReplaceAll(result, "{provider}", resource.Provider)

	// Replace property placeholders
	for key, value := range resource.Properties {
		placeholder := fmt.Sprintf("{%s}", key)
		if str, ok := value.(string); ok {
			result = strings.ReplaceAll(result, placeholder, str)
		}
	}

	return result
}

// sanitizeResourceName creates a valid Terraform resource name
func (g *ImportGenerator) sanitizeResourceName(name string) string {
	// Replace invalid characters with underscores
	sanitized := strings.Map(func(r rune) rune {
		if (r >= 'a' && r <= 'z') || (r >= 'A' && r <= 'Z') ||
			(r >= '0' && r <= '9') || r == '_' {
			return r
		}
		return '_'
	}, name)

	// Ensure it starts with a letter
	if len(sanitized) > 0 && (sanitized[0] >= '0' && sanitized[0] <= '9') {
		sanitized = "r_" + sanitized
	}

	// Limit length
	if len(sanitized) > 63 {
		sanitized = sanitized[:63]
	}

	return sanitized
}
