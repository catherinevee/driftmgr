version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: 
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DISCOVERY_SERVICE_URL=http://discovery-service:8081
      - ANALYSIS_SERVICE_URL=http://analysis-service:8082
      - REMEDIATION_SERVICE_URL=http://remediation-service:8083
      - WORKFLOW_SERVICE_URL=http://workflow-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - WEB_SERVICE_URL=http://web-service:8086
      - CLI_SERVICE_URL=http://cli-service:8087
    depends_on:
      - discovery-service
      - analysis-service
      - remediation-service
      - workflow-service
      - notification-service
      - web-service
      - cli-service
    networks:
      - driftmgr-network

  # Discovery Service
  discovery-service:
    build: 
      context: .
      dockerfile: discovery-service/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - GCP_CREDENTIALS=${GCP_CREDENTIALS}
    depends_on:
      - postgres
      - redis
    networks:
      - driftmgr-network
    volumes:
      - ./config:/app/config:ro

  # Analysis Service
  analysis-service:
    build: 
      context: .
      dockerfile: analysis-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
      - DISCOVERY_SERVICE_URL=http://discovery-service:8081
      - ML_SERVICE_URL=http://ml-service:8090
    depends_on:
      - postgres
      - redis
      - discovery-service
      - ml-service
    networks:
      - driftmgr-network

  # Remediation Service
  remediation-service:
    build: 
      context: .
      dockerfile: remediation-service/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
      - ANALYSIS_SERVICE_URL=http://analysis-service:8082
      - WORKFLOW_SERVICE_URL=http://workflow-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      - postgres
      - redis
      - analysis-service
      - workflow-service
      - notification-service
    networks:
      - driftmgr-network

  # Workflow Service
  workflow-service:
    build: 
      context: .
      dockerfile: workflow-service/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      - postgres
      - redis
      - notification-service
    networks:
      - driftmgr-network

  # Notification Service
  notification-service:
    build: 
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - TEAMS_WEBHOOK_URL=${TEAMS_WEBHOOK_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - driftmgr-network

  # Web Interface Service
  web-service:
    build: 
      context: .
      dockerfile: web-service/Dockerfile
    ports:
      - "8086:8086"
    environment:
      - REDIS_URL=redis://redis:6379
      - DISCOVERY_SERVICE_URL=http://discovery-service:8081
      - ANALYSIS_SERVICE_URL=http://analysis-service:8082
      - REMEDIATION_SERVICE_URL=http://remediation-service:8083
      - WORKFLOW_SERVICE_URL=http://workflow-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      - redis
      - discovery-service
      - analysis-service
      - remediation-service
      - workflow-service
      - notification-service
    networks:
      - driftmgr-network
    volumes:
      - ./web-service/static:/app/static:ro

  # CLI Service
  cli-service:
    build: 
      context: .
      dockerfile: cli-service/Dockerfile
    ports:
      - "8087:8087"
    environment:
      - REDIS_URL=redis://redis:6379
      - DISCOVERY_SERVICE_URL=http://discovery-service:8081
      - ANALYSIS_SERVICE_URL=http://analysis-service:8082
      - REMEDIATION_SERVICE_URL=http://remediation-service:8083
      - WORKFLOW_SERVICE_URL=http://workflow-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
    depends_on:
      - redis
      - discovery-service
      - analysis-service
      - remediation-service
      - workflow-service
      - notification-service
    networks:
      - driftmgr-network

  # Database Service
  database-service:
    build: 
      context: .
      dockerfile: database-service/Dockerfile
    ports:
      - "8088:8088"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - driftmgr-network

  # Cache Service
  cache-service:
    build: 
      context: .
      dockerfile: cache-service/Dockerfile
    ports:
      - "8089:8089"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_SERVICE_URL=http://database-service:8088
    depends_on:
      - redis
      - database-service
    networks:
      - driftmgr-network

  # ML Service
  ml-service:
    build: 
      context: .
      dockerfile: ml-service/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - ANALYSIS_SERVICE_URL=http://analysis-service:8082
      - MODEL_PATH=/app/models
    depends_on:
      - postgres
      - analysis-service
    networks:
      - driftmgr-network
    volumes:
      - ./ml-service/models:/app/models

  # Monitoring Service
  monitoring-service:
    build: 
      context: .
      dockerfile: monitoring-service/Dockerfile
    ports:
      - "8091:8091"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - PROMETHEUS_URL=http://prometheus:9090
      - JAEGER_URL=http://jaeger:16686
    depends_on:
      - postgres
      - prometheus
      - jaeger
    networks:
      - driftmgr-network

  # Security Service
  security-service:
    build: 
      context: .
      dockerfile: security-service/Dockerfile
    ports:
      - "8092:8092"
    environment:
      - DATABASE_URL=postgresql://driftmgr:password@postgres:5432/driftmgr
      - JWT_SECRET=${JWT_SECRET}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - MONITORING_SERVICE_URL=http://monitoring-service:8091
    depends_on:
      - postgres
      - monitoring-service
    networks:
      - driftmgr-network

  # Infrastructure Services

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=driftmgr
      - POSTGRES_USER=driftmgr
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d:ro
    networks:
      - driftmgr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U driftmgr"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - driftmgr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=driftmgr
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - driftmgr-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - driftmgr-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - driftmgr-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - driftmgr-network

  # Consul Service Discovery
  consul:
    image: consul:latest
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    networks:
      - driftmgr-network

  # Elasticsearch (for logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - driftmgr-network

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - driftmgr-network

  # Filebeat (for log collection)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log/docker:/var/log/docker:ro
    depends_on:
      - elasticsearch
    networks:
      - driftmgr-network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  driftmgr-network:
    driver: bridge
