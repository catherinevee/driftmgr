name: Security & Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # ============== CODE SCANNING ==============
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # ============== SECURITY SCANNING ==============
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      continue-on-error: true
      timeout-minutes: 5
      with:
        args: '-fmt sarif -out gosec.sarif -severity high -timeout 5m ./...'

    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request'
      continue-on-error: true
      with:
        sarif_file: gosec.sarif

    - name: Run Semgrep
      id: semgrep
      uses: returntocorp/semgrep-action@v1
      continue-on-error: true
      with:
        config: >-
          p/security-audit
          p/golang
          p/owasp-top-ten
        generateSarif: true

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request' && steps.semgrep.outcome == 'success'
      continue-on-error: true
      with:
        sarif_file: semgrep.sarif

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified

  # ============== DEPENDENCY SCANNING ==============
  dependency-scan:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run Nancy vulnerability scanner
      continue-on-error: true
      run: |
        # Try to install Nancy, but continue if it fails (repository issues)
        go install github.com/sonatype-nexus-community/nancy@latest || echo "Nancy installation failed, skipping vulnerability scan"
        
        # Only run Nancy if it was successfully installed
        if command -v nancy &> /dev/null; then
          go list -json -deps ./... | nancy sleuth || echo "Nancy scan completed with findings"
        else
          echo "Nancy not available, skipping dependency vulnerability scan"
        fi

    - name: Run Snyk Security
      id: snyk
      uses: snyk/actions/golang@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk.sarif

    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name != 'pull_request' && steps.snyk.outcome == 'success'
      continue-on-error: true
      with:
        sarif_file: snyk.sarif

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      if: github.event_name == 'pull_request'
      with:
        fail-on-severity: high
        deny-licenses: GPL-3.0, AGPL-3.0

  # ============== LICENSE COMPLIANCE ==============
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        go-licenses check ./... --allowed_licenses=MIT,Apache-2.0,BSD-3-Clause,BSD-2-Clause,ISC,MPL-2.0

    - name: Generate license report
      run: |
        go-licenses report ./... > licenses.csv
        echo "# License Report" > license-report.md
        echo "Generated on: $(date)" >> license-report.md
        echo "" >> license-report.md
        echo "## Summary" >> license-report.md
        echo "\`\`\`" >> license-report.md
        cat licenses.csv | head -20 >> license-report.md
        echo "\`\`\`" >> license-report.md

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          licenses.csv
          license-report.md

  # ============== SBOM GENERATION ==============
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        format: cyclonedx-json
        output-file: sbom.cyclonedx.json

    - name: Generate SBOM in SPDX format
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: |
          sbom.cyclonedx.json
          sbom.spdx.json

  # ============== COMPLIANCE REPORTING ==============
  compliance-report:
    name: Compliance Report
    runs-on: ubuntu-latest
    needs: [codeql, security-scan, dependency-scan, license-check, sbom]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Generate compliance report
      run: |
        echo "# Security & Compliance Report" > compliance-report.md
        echo "Repository: ${{ github.repository }}" >> compliance-report.md
        echo "Branch: ${{ github.ref }}" >> compliance-report.md
        echo "Commit: ${{ github.sha }}" >> compliance-report.md
        echo "Date: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Scan Results Summary" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "### Security Scans" >> compliance-report.md
        echo "- CodeQL: ${{ needs.codeql.result }}" >> compliance-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> compliance-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "### Compliance Checks" >> compliance-report.md
        echo "- License Check: ${{ needs.license-check.result }}" >> compliance-report.md
        echo "- SBOM Generation: ${{ needs.sbom.result }}" >> compliance-report.md
        echo "" >> compliance-report.md
        
        echo "## Artifacts" >> compliance-report.md
        echo "The following artifacts were generated:" >> compliance-report.md
        echo "- SBOM (CycloneDX format)" >> compliance-report.md
        echo "- SBOM (SPDX format)" >> compliance-report.md
        echo "- License Report" >> compliance-report.md
        echo "- Security scan results (SARIF format)" >> compliance-report.md

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('compliance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # ============== POLICY ENFORCEMENT ==============
  policy-check:
    name: Policy Enforcement
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/

    - name: Run OPA policies
      run: |
        # Check if policies directory exists
        if [ -d "./policies" ]; then
          echo "Running OPA policy checks..."
          for policy in ./policies/*.rego; do
            if [ -f "$policy" ]; then
              echo "Checking policy: $(basename $policy)"
              opa eval -d "$policy" -i <(echo '{}') "data.$(basename $policy .rego).allow" || true
            fi
          done
        else
          echo "No OPA policies found in ./policies directory"
        fi

    - name: Check branch protection
      uses: actions/github-script@v7
      with:
        script: |
          const { data: branch } = await github.rest.repos.getBranch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            branch: 'main'
          });
          
          if (!branch.protected) {
            core.warning('Main branch is not protected!');
          }

  # ============== SECURITY ADVISORY ==============
  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Check for security advisories
      uses: actions/github-script@v7
      with:
        script: |
          const { data: advisories } = await github.rest.securityAdvisories.listRepositoryAdvisories({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'published'
          });
          
          if (advisories.length > 0) {
            core.warning(`Found ${advisories.length} security advisories`);
            for (const advisory of advisories) {
              console.log(`- ${advisory.summary}: ${advisory.severity}`);
            }
          }