name: Verify DriftMgr Results

on:
  workflow_dispatch:
    inputs:
      providers:
        description: 'Cloud providers to verify (comma-separated: aws,azure,gcp,digitalocean)'
        required: false
        default: 'aws,azure,gcp,digitalocean'
      comparison_mode:
        description: 'Comparison mode'
        required: true
        default: 'count'
        type: choice
        options:
          - count
          - detailed
          - full
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_run:
    workflows: ["Infrastructure Drift Detection"]
    types:
      - completed

env:
  ARTIFACT_RETENTION_DAYS: 30

jobs:
  verify-aws:
    name: Verify AWS Resources
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.providers, 'aws') || github.event_name == 'schedule' || github.event_name == 'workflow_run'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

    - name: Run DriftMgr discovery
      id: driftmgr
      run: |
        # Build and run DriftMgr
        go build -o driftmgr ./cmd/driftmgr
        ./driftmgr discover --provider aws --format json --output drift_aws.json
        
        # Extract counts
        DRIFT_COUNT=$(jq '.aws.resource_count // 0' drift_aws.json)
        echo "drift_count=$DRIFT_COUNT" >> $GITHUB_OUTPUT
        
        # Extract resource types
        jq -r '.aws.resources[].type' drift_aws.json | sort | uniq -c > drift_aws_types.txt

    - name: Verify with AWS CLI
      id: aws_cli
      run: |
        # Count resources using AWS CLI
        EC2_COUNT=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId]' --output text | grep -c '^i-' || echo 0)
        S3_COUNT=$(aws s3api list-buckets --query 'Buckets[*].Name' --output text | wc -w)
        RDS_COUNT=$(aws rds describe-db-instances --query 'DBInstances[*].DBInstanceIdentifier' --output text | wc -w || echo 0)
        LAMBDA_COUNT=$(aws lambda list-functions --query 'Functions[*].FunctionName' --output text | wc -w || echo 0)
        VPC_COUNT=$(aws ec2 describe-vpcs --query 'Vpcs[*].VpcId' --output text | wc -w)
        SG_COUNT=$(aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupId' --output text | wc -w)
        IAM_USER_COUNT=$(aws iam list-users --query 'Users[*].UserName' --output text | wc -w || echo 0)
        IAM_ROLE_COUNT=$(aws iam list-roles --query 'Roles[*].RoleName' --output text | wc -w || echo 0)
        
        AWS_TOTAL=$((EC2_COUNT + S3_COUNT + RDS_COUNT + LAMBDA_COUNT + VPC_COUNT + SG_COUNT + IAM_USER_COUNT + IAM_ROLE_COUNT))
        echo "aws_count=$AWS_TOTAL" >> $GITHUB_OUTPUT
        
        # Detailed breakdown
        echo "EC2: $EC2_COUNT" > aws_cli_counts.txt
        echo "S3: $S3_COUNT" >> aws_cli_counts.txt
        echo "RDS: $RDS_COUNT" >> aws_cli_counts.txt
        echo "Lambda: $LAMBDA_COUNT" >> aws_cli_counts.txt
        echo "VPC: $VPC_COUNT" >> aws_cli_counts.txt
        echo "Security Groups: $SG_COUNT" >> aws_cli_counts.txt
        echo "IAM Users: $IAM_USER_COUNT" >> aws_cli_counts.txt
        echo "IAM Roles: $IAM_ROLE_COUNT" >> aws_cli_counts.txt
        echo "Total: $AWS_TOTAL" >> aws_cli_counts.txt

    - name: Verify with AWS Config
      if: github.event.inputs.comparison_mode == 'detailed' || github.event.inputs.comparison_mode == 'full'
      continue-on-error: true
      run: |
        # Query AWS Config for resource inventory
        aws configservice select-aggregate-resource-config \
          --expression "SELECT resourceType, COUNT(*) WHERE resourceType LIKE 'AWS::%' GROUP BY resourceType" \
          --configuration-aggregator-name default \
          --output json > aws_config_inventory.json || echo "{}" > aws_config_inventory.json

    - name: Compare results
      id: compare
      run: |
        DRIFT_COUNT=${{ steps.driftmgr.outputs.drift_count }}
        AWS_COUNT=${{ steps.aws_cli.outputs.aws_count }}
        
        echo "### AWS Verification Results ###" > aws_verification_report.md
        echo "" >> aws_verification_report.md
        echo "| Source | Resource Count |" >> aws_verification_report.md
        echo "|--------|---------------|" >> aws_verification_report.md
        echo "| DriftMgr | $DRIFT_COUNT |" >> aws_verification_report.md
        echo "| AWS CLI | $AWS_COUNT |" >> aws_verification_report.md
        echo "" >> aws_verification_report.md
        
        if [ "$DRIFT_COUNT" -eq "$AWS_COUNT" ]; then
          echo "[OK] **Verification Status: PASSED**" >> aws_verification_report.md
          echo "verification_status=passed" >> $GITHUB_OUTPUT
        else
          DIFF=$((DRIFT_COUNT - AWS_COUNT))
          echo "[WARNING] **Verification Status: MISMATCH**" >> aws_verification_report.md
          echo "Difference: $DIFF resources" >> aws_verification_report.md
          echo "verification_status=mismatch" >> $GITHUB_OUTPUT
          
          # Show detailed differences if in detailed mode
          if [ "${{ github.event.inputs.comparison_mode }}" = "detailed" ] || [ "${{ github.event.inputs.comparison_mode }}" = "full" ]; then
            echo "" >> aws_verification_report.md
            echo "#### Detailed Breakdown:" >> aws_verification_report.md
            echo '```' >> aws_verification_report.md
            cat aws_cli_counts.txt >> aws_verification_report.md
            echo '```' >> aws_verification_report.md
          fi
        fi

    - name: Upload verification artifacts
      uses: actions/upload-artifact@v4
      with:
        name: aws-verification-${{ github.run_id }}
        path: |
          drift_aws.json
          drift_aws_types.txt
          aws_cli_counts.txt
          aws_config_inventory.json
          aws_verification_report.md
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  verify-azure:
    name: Verify Azure Resources
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.providers, 'azure') || github.event_name == 'schedule' || github.event_name == 'workflow_run'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run DriftMgr discovery
      id: driftmgr
      run: |
        go build -o driftmgr ./cmd/driftmgr
        ./driftmgr discover --provider azure --format json --output drift_azure.json
        
        DRIFT_COUNT=$(jq '.azure.resource_count // 0' drift_azure.json)
        echo "drift_count=$DRIFT_COUNT" >> $GITHUB_OUTPUT

    - name: Verify with Azure CLI
      id: azure_cli
      run: |
        # Count all resources
        AZURE_TOTAL=$(az resource list --query 'length(@)' --output tsv)
        echo "azure_count=$AZURE_TOTAL" >> $GITHUB_OUTPUT
        
        # Detailed breakdown by type
        az resource list --query "groupBy(@, &type)[].{type: name, count: length(@)}" --output json > azure_cli_types.json
        
        # Count specific resource types
        VM_COUNT=$(az vm list --query 'length(@)' --output tsv || echo 0)
        STORAGE_COUNT=$(az storage account list --query 'length(@)' --output tsv || echo 0)
        RG_COUNT=$(az group list --query 'length(@)' --output tsv || echo 0)
        VNET_COUNT=$(az network vnet list --query 'length(@)' --output tsv || echo 0)
        NSG_COUNT=$(az network nsg list --query 'length(@)' --output tsv || echo 0)
        
        echo "VMs: $VM_COUNT" > azure_cli_counts.txt
        echo "Storage Accounts: $STORAGE_COUNT" >> azure_cli_counts.txt
        echo "Resource Groups: $RG_COUNT" >> azure_cli_counts.txt
        echo "Virtual Networks: $VNET_COUNT" >> azure_cli_counts.txt
        echo "Network Security Groups: $NSG_COUNT" >> azure_cli_counts.txt
        echo "Total: $AZURE_TOTAL" >> azure_cli_counts.txt

    - name: Verify with Azure Resource Graph
      if: github.event.inputs.comparison_mode == 'detailed' || github.event.inputs.comparison_mode == 'full'
      run: |
        # Query Azure Resource Graph for complete inventory
        az graph query -q "Resources | summarize count() by type" --output json > azure_graph_inventory.json
        
        # Get detailed resource list
        az graph query -q "Resources | project name, type, location, resourceGroup | limit 1000" --output json > azure_graph_details.json

    - name: Compare results
      id: compare
      run: |
        DRIFT_COUNT=${{ steps.driftmgr.outputs.drift_count }}
        AZURE_COUNT=${{ steps.azure_cli.outputs.azure_count }}
        
        echo "### Azure Verification Results ###" > azure_verification_report.md
        echo "" >> azure_verification_report.md
        echo "| Source | Resource Count |" >> azure_verification_report.md
        echo "|--------|---------------|" >> azure_verification_report.md
        echo "| DriftMgr | $DRIFT_COUNT |" >> azure_verification_report.md
        echo "| Azure CLI | $AZURE_COUNT |" >> azure_verification_report.md
        echo "" >> azure_verification_report.md
        
        if [ "$DRIFT_COUNT" -eq "$AZURE_COUNT" ]; then
          echo "[OK] **Verification Status: PASSED**" >> azure_verification_report.md
          echo "verification_status=passed" >> $GITHUB_OUTPUT
        else
          echo "[WARNING] **Verification Status: MISMATCH**" >> azure_verification_report.md
          echo "verification_status=mismatch" >> $GITHUB_OUTPUT
        fi

    - name: Upload verification artifacts
      uses: actions/upload-artifact@v4
      with:
        name: azure-verification-${{ github.run_id }}
        path: |
          drift_azure.json
          azure_cli_*.txt
          azure_cli_types.json
          azure_graph_*.json
          azure_verification_report.md
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  verify-gcp:
    name: Verify GCP Resources
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.providers, 'gcp') || github.event_name == 'schedule' || github.event_name == 'workflow_run'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Run DriftMgr discovery
      id: driftmgr
      run: |
        go build -o driftmgr ./cmd/driftmgr
        ./driftmgr discover --provider gcp --format json --output drift_gcp.json
        
        DRIFT_COUNT=$(jq '.gcp.resource_count // 0' drift_gcp.json)
        echo "drift_count=$DRIFT_COUNT" >> $GITHUB_OUTPUT

    - name: Verify with gcloud CLI
      id: gcp_cli
      run: |
        PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
        
        # Count resources
        INSTANCE_COUNT=$(gcloud compute instances list --project=$PROJECT_ID --format='value(name)' | wc -l)
        BUCKET_COUNT=$(gcloud storage buckets list --project=$PROJECT_ID --format='value(name)' | wc -l)
        DISK_COUNT=$(gcloud compute disks list --project=$PROJECT_ID --format='value(name)' | wc -l)
        NETWORK_COUNT=$(gcloud compute networks list --project=$PROJECT_ID --format='value(name)' | wc -l)
        SQL_COUNT=$(gcloud sql instances list --project=$PROJECT_ID --format='value(name)' | wc -l || echo 0)
        GKE_COUNT=$(gcloud container clusters list --project=$PROJECT_ID --format='value(name)' | wc -l || echo 0)
        
        GCP_TOTAL=$((INSTANCE_COUNT + BUCKET_COUNT + DISK_COUNT + NETWORK_COUNT + SQL_COUNT + GKE_COUNT))
        echo "gcp_count=$GCP_TOTAL" >> $GITHUB_OUTPUT
        
        echo "Compute Instances: $INSTANCE_COUNT" > gcp_cli_counts.txt
        echo "Storage Buckets: $BUCKET_COUNT" >> gcp_cli_counts.txt
        echo "Persistent Disks: $DISK_COUNT" >> gcp_cli_counts.txt
        echo "Networks: $NETWORK_COUNT" >> gcp_cli_counts.txt
        echo "Cloud SQL: $SQL_COUNT" >> gcp_cli_counts.txt
        echo "GKE Clusters: $GKE_COUNT" >> gcp_cli_counts.txt
        echo "Total: $GCP_TOTAL" >> gcp_cli_counts.txt

    - name: Verify with Cloud Asset Inventory
      if: github.event.inputs.comparison_mode == 'detailed' || github.event.inputs.comparison_mode == 'full'
      continue-on-error: true
      run: |
        # Export asset inventory
        gcloud asset export \
          --project=${{ secrets.GCP_PROJECT_ID }} \
          --content-type=RESOURCE \
          --output-path="gs://temp-drift-verification-${{ github.run_id }}/inventory.json" || true

    - name: Compare results
      id: compare
      run: |
        DRIFT_COUNT=${{ steps.driftmgr.outputs.drift_count }}
        GCP_COUNT=${{ steps.gcp_cli.outputs.gcp_count }}
        
        echo "### GCP Verification Results ###" > gcp_verification_report.md
        echo "" >> gcp_verification_report.md
        echo "| Source | Resource Count |" >> gcp_verification_report.md
        echo "|--------|---------------|" >> gcp_verification_report.md
        echo "| DriftMgr | $DRIFT_COUNT |" >> gcp_verification_report.md
        echo "| gcloud CLI | $GCP_COUNT |" >> gcp_verification_report.md
        echo "" >> gcp_verification_report.md
        
        if [ "$DRIFT_COUNT" -eq "$GCP_COUNT" ]; then
          echo "[OK] **Verification Status: PASSED**" >> gcp_verification_report.md
          echo "verification_status=passed" >> $GITHUB_OUTPUT
        else
          echo "[WARNING] **Verification Status: MISMATCH**" >> gcp_verification_report.md
          echo "verification_status=mismatch" >> $GITHUB_OUTPUT
        fi

    - name: Upload verification artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gcp-verification-${{ github.run_id }}
        path: |
          drift_gcp.json
          gcp_cli_counts.txt
          gcp_verification_report.md
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  verify-digitalocean:
    name: Verify DigitalOcean Resources
    runs-on: ubuntu-latest
    if: contains(github.event.inputs.providers, 'digitalocean') || github.event_name == 'schedule' || github.event_name == 'workflow_run'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_TOKEN }}

    - name: Run DriftMgr discovery
      id: driftmgr
      run: |
        go build -o driftmgr ./cmd/driftmgr
        ./driftmgr discover --provider digitalocean --format json --output drift_do.json
        
        DRIFT_COUNT=$(jq '.digitalocean.resource_count // 0' drift_do.json)
        echo "drift_count=$DRIFT_COUNT" >> $GITHUB_OUTPUT

    - name: Verify with doctl
      id: do_cli
      run: |
        # Count resources
        DROPLET_COUNT=$(doctl compute droplet list --format ID --no-header | wc -l)
        VOLUME_COUNT=$(doctl compute volume list --format ID --no-header | wc -l)
        DB_COUNT=$(doctl databases list --format ID --no-header | wc -l || echo 0)
        LB_COUNT=$(doctl compute load-balancer list --format ID --no-header | wc -l || echo 0)
        K8S_COUNT=$(doctl kubernetes cluster list --format ID --no-header | wc -l || echo 0)
        
        DO_TOTAL=$((DROPLET_COUNT + VOLUME_COUNT + DB_COUNT + LB_COUNT + K8S_COUNT))
        echo "do_count=$DO_TOTAL" >> $GITHUB_OUTPUT
        
        echo "Droplets: $DROPLET_COUNT" > do_cli_counts.txt
        echo "Volumes: $VOLUME_COUNT" >> do_cli_counts.txt
        echo "Databases: $DB_COUNT" >> do_cli_counts.txt
        echo "Load Balancers: $LB_COUNT" >> do_cli_counts.txt
        echo "Kubernetes: $K8S_COUNT" >> do_cli_counts.txt
        echo "Total: $DO_TOTAL" >> do_cli_counts.txt

    - name: Compare results
      id: compare
      run: |
        DRIFT_COUNT=${{ steps.driftmgr.outputs.drift_count }}
        DO_COUNT=${{ steps.do_cli.outputs.do_count }}
        
        echo "### DigitalOcean Verification Results ###" > do_verification_report.md
        echo "" >> do_verification_report.md
        echo "| Source | Resource Count |" >> do_verification_report.md
        echo "|--------|---------------|" >> do_verification_report.md
        echo "| DriftMgr | $DRIFT_COUNT |" >> do_verification_report.md
        echo "| doctl | $DO_COUNT |" >> do_verification_report.md
        echo "" >> do_verification_report.md
        
        if [ "$DRIFT_COUNT" -eq "$DO_COUNT" ]; then
          echo "[OK] **Verification Status: PASSED**" >> do_verification_report.md
          echo "verification_status=passed" >> $GITHUB_OUTPUT
        else
          echo "[WARNING] **Verification Status: MISMATCH**" >> do_verification_report.md
          echo "verification_status=mismatch" >> $GITHUB_OUTPUT
        fi

    - name: Upload verification artifacts
      uses: actions/upload-artifact@v4
      with:
        name: do-verification-${{ github.run_id }}
        path: |
          drift_do.json
          do_cli_counts.txt
          do_verification_report.md
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  consolidate-results:
    name: Consolidate Verification Results
    runs-on: ubuntu-latest
    needs: [verify-aws, verify-azure, verify-gcp, verify-digitalocean]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: verification-artifacts

    - name: Generate consolidated report
      run: |
        echo "# DriftMgr Verification Report" > consolidated_report.md
        echo "**Run Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> consolidated_report.md
        echo "**Run ID:** ${{ github.run_id }}" >> consolidated_report.md
        echo "" >> consolidated_report.md
        
        # Combine all verification reports
        for report in verification-artifacts/*/[^drift_]*.md; do
          if [ -f "$report" ]; then
            cat "$report" >> consolidated_report.md
            echo "" >> consolidated_report.md
          fi
        done
        
        echo "## Summary" >> consolidated_report.md
        echo "" >> consolidated_report.md
        
        # Check overall status
        if grep -q "MISMATCH" consolidated_report.md; then
          echo "[WARNING] **Overall Status: VERIFICATION FAILED**" >> consolidated_report.md
          echo "" >> consolidated_report.md
          echo "One or more providers showed resource count mismatches." >> consolidated_report.md
          echo "Please review the detailed reports above." >> consolidated_report.md
        else
          echo "[OK] **Overall Status: VERIFICATION PASSED**" >> consolidated_report.md
          echo "" >> consolidated_report.md
          echo "All providers show matching resource counts." >> consolidated_report.md
        fi

    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: verification-report-${{ github.run_id }}
        path: consolidated_report.md
        retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('consolidated_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          })

    - name: Create issue if verification failed
      if: contains(needs.*.outputs.verification_status, 'mismatch')
      uses: actions/github-script@v7
      with:
        script: |
          const title = `DriftMgr Verification Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Verification Failed
          
          One or more cloud providers showed resource count mismatches between DriftMgr and native CLI tools.
          
          **Run ID:** ${{ github.run_id }}
          **Workflow:** ${{ github.workflow }}
          
          Please review the [verification artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['verification', 'automated']
          })