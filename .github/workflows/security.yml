name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  gosec:
    name: Go Security Checker
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec-results.sarif

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy (check dependencies)
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecorp/nancy:latest sleuth

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t driftmgr:scan .

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'driftmgr:scan'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'

      - name: Run Snyk on Docker image
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -n "$SNYK_TOKEN" ]; then
            docker run --rm -e SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock \
              -v $(pwd):/project snyk/snyk:docker test driftmgr:scan --severity-threshold=high
          else
            echo "Snyk token not configured, skipping Snyk scan"
          fi

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Run go-licenses check
        run: |
          go install github.com/google/go-licenses@latest
          go-licenses check ./... --allowed_licenses=Apache-2.0,BSD-3-Clause,BSD-2-Clause,MIT,ISC,MPL-2.0

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-status:
    name: Security Status
    runs-on: ubuntu-latest
    needs: [gosec, vulnerability-scan, trivy-scan, docker-scan, codeql, license-scan, secrets-scan]
    if: always()
    
    steps:
      - name: Check security scan results
        run: |
          if [ "${{ needs.gosec.result }}" == "success" ] && \
             [ "${{ needs.vulnerability-scan.result }}" == "success" ] && \
             [ "${{ needs.trivy-scan.result }}" == "success" ] && \
             [ "${{ needs.docker-scan.result }}" == "success" ] && \
             [ "${{ needs.codeql.result }}" == "success" ] && \
             [ "${{ needs.license-scan.result }}" == "success" ] && \
             [ "${{ needs.secrets-scan.result }}" == "success" ]; then
            echo "✅ All security scans passed!"
            exit 0
          else
            echo "⚠️ Security scan results:"
            echo "Gosec: ${{ needs.gosec.result }}"
            echo "Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
            echo "Trivy: ${{ needs.trivy-scan.result }}"
            echo "Docker Scan: ${{ needs.docker-scan.result }}"
            echo "CodeQL: ${{ needs.codeql.result }}"
            echo "License Scan: ${{ needs.license-scan.result }}"
            echo "Secrets Scan: ${{ needs.secrets-scan.result }}"
            # Don't fail the workflow, just report
            exit 0
          fi