name: DriftMgr Workflow Dispatch

on:
  workflow_dispatch:
    inputs:
      workflow_type:
        description: 'Type of workflow to execute'
        required: true
        default: 'drift-analysis'
        type: choice
        options:
        - drift-analysis
        - resource-discovery
        - state-import
        - infrastructure-audit
        - security-scan
      provider:
        description: 'Cloud provider'
        required: true
        default: 'aws'
        type: choice
        options:
        - aws
        - azure
        - gcp
      regions:
        description: 'Comma-separated list of regions'
        required: false
        default: 'us-east-1'
        type: string
      environment:
        description: 'Environment (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      dry_run:
        description: 'Dry run mode (no actual changes)'
        required: false
        default: true
        type: boolean
      parallel_imports:
        description: 'Number of parallel imports'
        required: false
        default: 5
        type: number
      output_format:
        description: 'Output format for reports'
        required: false
        default: 'json'
        type: choice
        options:
        - json
        - csv
        - table

env:
  GO_VERSION: '1.23'
  DRIFTMGR_VERSION: "1.0.0"
  WORKFLOW_TYPE: ${{ github.event.inputs.workflow_type }}
  PROVIDER: ${{ github.event.inputs.provider }}
  REGIONS: ${{ github.event.inputs.regions }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  DRY_RUN: ${{ github.event.inputs.dry_run }}
  PARALLEL_IMPORTS: ${{ github.event.inputs.parallel_imports }}
  OUTPUT_FORMAT: ${{ github.event.inputs.output_format }}

jobs:
  driftmgr-workflow:
    name: Execute DriftMgr Workflow
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build DriftMgr
      run: |
        echo "Building DriftMgr..."
        go build -o driftmgr ./cmd/driftmgr
        chmod +x driftmgr
        echo "[OK] DriftMgr built successfully"
        
    - name: Validate Build
      run: |
        echo "Validating DriftMgr build..."
        echo "DriftMgr binary exists and is executable"
        ls -la driftmgr
        echo "[OK] DriftMgr validation successful"

    - name: Setup Cloud Credentials
      run: |
        echo "Setting up credentials for $PROVIDER..."
        case $PROVIDER in
          "aws")
            echo "Configuring AWS credentials..."
            if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
              echo "[WARNING] AWS credentials not provided, running in dry-run mode"
              export DRY_RUN="true"
            else
              echo "[OK] AWS credentials configured"
            fi
            ;;
          "azure")
            echo "Configuring Azure credentials..."
            if [ -z "$AZURE_CLIENT_ID" ] || [ -z "$AZURE_CLIENT_SECRET" ] || [ -z "$AZURE_TENANT_ID" ]; then
              echo "[WARNING] Azure credentials not provided, running in dry-run mode"
              export DRY_RUN="true"
            else
              echo "[OK] Azure credentials configured"
            fi
            ;;
          "gcp")
            echo "Configuring GCP credentials..."
            if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
              echo "[WARNING] GCP credentials not provided, running in dry-run mode"
              export DRY_RUN="true"
            else
              echo "[OK] GCP credentials configured"
            fi
            ;;
        esac

    - name: Execute Workflow
      run: |
        echo "Executing DriftMgr workflow: $WORKFLOW_TYPE"
        echo "Provider: $PROVIDER"
        echo "Regions: $REGIONS"
        echo "Environment: $ENVIRONMENT"
        echo "Dry Run: $DRY_RUN"
        
        # Use the GitHub Actions integration command for better reliability
        case $WORKFLOW_TYPE in
          "drift-analysis")
            echo "Running drift analysis..."
            ./driftmgr github-actions workflow-dispatch --type drift-analysis --provider $PROVIDER --regions $REGIONS --environment $ENVIRONMENT --dry-run
            ;;
          "resource-discovery")
            echo "Running resource discovery..."
            ./driftmgr github-actions workflow-dispatch --type resource-discovery --provider $PROVIDER --regions $REGIONS --format $OUTPUT_FORMAT
            ;;
          "state-import")
            echo "Running state import..."
            if [ "$DRY_RUN" = "true" ]; then
              ./driftmgr github-actions workflow-dispatch --type state-import --provider $PROVIDER --dry-run --parallel $PARALLEL_IMPORTS
            else
              ./driftmgr github-actions workflow-dispatch --type state-import --provider $PROVIDER --parallel $PARALLEL_IMPORTS
            fi
            ;;
          "infrastructure-audit")
            echo "Running infrastructure audit..."
            ./driftmgr github-actions workflow-dispatch --type infrastructure-audit --provider $PROVIDER --regions $REGIONS
            ;;
          "security-scan")
            echo "Running security scan..."
            ./driftmgr github-actions workflow-dispatch --type security-scan --provider $PROVIDER --regions $REGIONS
            ;;
        esac
        
        # Generate a report after execution
        echo "Generating execution report..."
        ./driftmgr github-actions generate-report --output workflow-execution-report.md
        echo "[OK] Workflow execution completed"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ github.event.inputs.regions }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

    - name: Generate Workflow Report
      run: |
        echo "Generating workflow report..."
        echo "## DriftMgr Workflow Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Type:** $WORKFLOW_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "**Provider:** $PROVIDER" >> $GITHUB_STEP_SUMMARY
        echo "**Regions:** $REGIONS" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** $ENVIRONMENT" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** $DRY_RUN" >> $GITHUB_STEP_SUMMARY
        echo "**Execution Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Results" >> $GITHUB_STEP_SUMMARY
        echo "- [OK] Workflow completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ“Š Check the logs above for detailed results" >> $GITHUB_STEP_SUMMARY

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: driftmgr-results-${{ github.run_number }}
        path: |
          *.csv
          *.json
          *.tfstate
          *.log
          *.md
          driftmgr-data/
        retention-days: 30

    - name: Create Issue Comment
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_issue_comment == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const workflowType = '${{ github.event.inputs.workflow_type }}';
          const provider = '${{ github.event.inputs.provider }}';
          const regions = '${{ github.event.inputs.regions }}';
          const environment = '${{ github.event.inputs.environment }}';
          
          const comment = `## DriftMgr Workflow Execution Complete
          
          **Workflow:** ${workflowType}
          **Provider:** ${provider}
          **Regions:** ${regions}
          **Environment:** ${environment}
          
          The workflow has completed successfully. Check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for detailed results.
          
          ---
          *This comment was automatically generated by DriftMgr workflow dispatch.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: driftmgr-workflow
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.driftmgr-workflow.result == 'success'
      run: |
        echo "Workflow completed successfully!"
        # Add notification logic here (Slack, Teams, etc.)
        
    - name: Notify Failure
      if: needs.driftmgr-workflow.result == 'failure'
      run: |
        echo "Workflow failed!"
        # Add failure notification logic here
