name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54.2'

jobs:
  # Job 1: Code Quality and Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

    - name: Run security scan
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt json -out security-report.json ./...
        gosec -fmt sarif -out security-report.sarif ./...

    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: |
          security-report.json
          security-report.sarif

    - name: Run dependency check
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=unit-coverage.out -covermode=atomic ./tests/unit/...

    - name: Generate unit test coverage report
      run: |
        go tool cover -html=unit-coverage.out -o unit-coverage.html

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          unit-coverage.out
          unit-coverage.html

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: driftmgr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Set up test environment
      run: |
        # Create test policies directory
        mkdir -p policies
        # Copy test policies if they exist
        if [ -d "policies" ]; then
          echo "Test policies directory exists"
        fi

    - name: Run integration tests
      run: |
        go test -v -race -coverprofile=integration-coverage.out -covermode=atomic ./tests/integration/...
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/driftmgr_test?sslmode=disable
        REDIS_URL: redis://localhost:6379
        TEST_MODE: true

    - name: Generate integration test coverage report
      run: |
        go tool cover -html=integration-coverage.out -o integration-coverage.html

    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-coverage.out
          integration-coverage.html

  # Job 4: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run performance benchmarks
      run: |
        go test -bench=. -benchmem -run=^$ ./tests/benchmarks/... > benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.txt

  # Job 5: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Build application
      run: |
        go build -o driftmgr ./cmd/driftmgr
        go build -o driftmgr-server ./cmd/server

    - name: Run e2e tests
      run: |
        go test -v -tags=e2e ./tests/e2e/...

    - name: Upload e2e test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          driftmgr
          driftmgr-server

  # Job 6: Coverage Report
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download unit test coverage
      uses: actions/download-artifact@v3
      with:
        name: unit-test-results
        path: unit-coverage/

    - name: Download integration test coverage
      uses: actions/download-artifact@v3
      with:
        name: integration-test-results
        path: integration-coverage/

    - name: Combine coverage reports
      run: |
        echo "mode: atomic" > combined-coverage.out
        tail -n +2 unit-coverage/unit-coverage.out >> combined-coverage.out
        tail -n +2 integration-coverage/integration-coverage.out >> combined-coverage.out

    - name: Generate combined coverage report
      run: |
        go tool cover -html=combined-coverage.out -o combined-coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./combined-coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload combined coverage report
      uses: actions/upload-artifact@v3
      with:
        name: combined-coverage-report
        path: |
          combined-coverage.out
          combined-coverage.html

  # Job 7: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality, unit-tests, integration-tests, performance-tests, e2e-tests, coverage]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Job Results" >> test-summary.md
        echo "" >> test-summary.md
        echo "| Job | Status |" >> test-summary.md
        echo "|-----|--------|" >> test-summary.md
        echo "| Quality & Security | ${{ needs.quality.result }} |" >> test-summary.md
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> test-summary.md
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-summary.md
        echo "| Coverage Report | ${{ needs.coverage.result }} |" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Coverage Summary" >> test-summary.md
        echo "" >> test-summary.md
        if [ -f "combined-coverage-report/combined-coverage.out" ]; then
          echo "\`\`\`" >> test-summary.md
          go tool cover -func=combined-coverage-report/combined-coverage.out | tail -1 >> test-summary.md
          echo "\`\`\`" >> test-summary.md
        fi

    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
