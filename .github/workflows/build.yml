name: Build

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'examples/**'
      - '.gitignore'
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
        include:
          - os: ubuntu-latest
            artifact-name: driftmgr-linux-amd64
            binary-name: driftmgr
          - os: windows-latest
            artifact-name: driftmgr-windows-amd64
            binary-name: driftmgr.exe
          - os: macos-latest
            artifact-name: driftmgr-darwin-amd64
            binary-name: driftmgr

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run gofmt
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not properly formatted. Run 'gofmt -s -w .' to fix."
            gofmt -s -d .
            exit 1
          fi

      - name: Run golangci-lint
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=10m

      - name: Build driftmgr CLI
        run: go build -v -o ${{ matrix.binary-name }} ./cmd/driftmgr

      - name: Build driftmgr-server
        run: go build -v -o driftmgr-server${{ matrix.os == 'windows-latest' && '.exe' || '' }} ./cmd/driftmgr-server

      - name: Verify build
        run: |
          ./${{ matrix.binary-name }} --version
        shell: bash

      - name: Build all packages
        run: go build -v ./...

      - name: Create artifact directory
        if: matrix.go-version == '1.23'
        run: mkdir -p artifacts

      - name: Prepare artifacts
        if: matrix.go-version == '1.23'
        run: |
          cp ${{ matrix.binary-name }} artifacts/
          cp driftmgr-server${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifacts/
          cp README.md artifacts/
          cp -r configs artifacts/ || true
          cp -r examples artifacts/ || true
        shell: bash

      - name: Upload artifacts
        if: matrix.go-version == '1.23'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}-go${{ matrix.go-version }}
          path: artifacts/
          retention-days: 7

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: |
            catherinevee/driftmgr:latest
            catherinevee/driftmgr:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  check-generated:
    name: Check Generated Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check go.mod and go.sum
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "go.mod or go.sum is not up to date. Run 'go mod tidy' and commit the changes."
            exit 1
          fi

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [build, build-docker, check-generated]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs.build-docker.result }}" == "success" ] && \
             [ "${{ needs.check-generated.result }}" == "success" ]; then
            echo "✅ All builds passed successfully!"
            exit 0
          else
            echo "❌ One or more builds failed"
            echo "Build: ${{ needs.build.result }}"
            echo "Docker: ${{ needs.build-docker.result }}"
            echo "Generated: ${{ needs.check-generated.result }}"
            exit 1
          fi