name: DriftMgr - Terraform Drift Check

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      provider:
        description: 'Cloud provider to check (aws, azure, gcp)'
        required: true
        default: 'aws'
        type: choice
        options:
          - aws
          - azure
          - gcp
      regions:
        description: 'Comma-separated list of regions to check'
        required: false
        default: 'us-east-1,us-west-2,eu-west-1'
        type: string
      severity:
        description: 'Minimum severity level to report'
        required: false
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - critical
      output_format:
        description: 'Output format for reports'
        required: false
        default: 'json'
        type: choice
        options:
          - json
          - yaml
          - csv
          - html
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

env:
  DRIFTMGR_VERSION: "latest"
  OUTPUT_DIR: "drift-reports"

jobs:
  drift-check:
    name: Check for Terraform Drift
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          
      - name: Install DriftMgr
        run: |
          # Download and install driftmgr
          curl -L https://github.com/catherinevee/driftmgr/releases/latest/download/driftmgr-linux-amd64 -o driftmgr
          chmod +x driftmgr
          sudo mv driftmgr /usr/local/bin/
          
      - name: Configure AWS Credentials
        if: inputs.provider == 'aws' || github.event.inputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          
      - name: Configure Azure Credentials
        if: inputs.provider == 'azure' || github.event.inputs.provider == 'azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Configure GCP Credentials
        if: inputs.provider == 'gcp' || github.event.inputs.provider == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Create output directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}
        
      - name: Check credentials
        run: |
          echo "Checking cloud credentials..."
          driftmgr credentials
          
      - name: Discover resources
        run: |
          echo "Discovering Terraform resources..."
          driftmgr discover \
            --provider ${{ inputs.provider || github.event.inputs.provider || 'aws' }} \
            --region ${{ inputs.regions || github.event.inputs.regions || 'us-east-1' }} \
            --output ${{ env.OUTPUT_DIR }}/resources.${{ inputs.output_format || github.event.inputs.output_format || 'json' }}
            
      - name: Analyze drift
        run: |
          echo "Analyzing for drift..."
          driftmgr state drift \
            --provider ${{ inputs.provider || github.event.inputs.provider || 'aws' }} \
            --severity ${{ inputs.severity || github.event.inputs.severity || 'warning' }} \
            --output ${{ env.OUTPUT_DIR }}/drift.${{ inputs.output_format || github.event.inputs.output_format || 'json' }}
            
      - name: Generate drift report
        run: |
          echo "Generating comprehensive drift report..."
          
          # Create summary report
          cat > ${{ env.OUTPUT_DIR }}/summary.md << EOF
          # DriftMgr Drift Check Report
          
          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Provider:** ${{ inputs.provider || github.event.inputs.provider || 'aws' }}
          **Regions:** ${{ inputs.regions || github.event.inputs.regions || 'us-east-1' }}
          **Severity Threshold:** ${{ inputs.severity || github.event.inputs.severity || 'warning' }}
          
          ## Summary
          
          This report was generated by DriftMgr to check for Terraform drift in your infrastructure.
          
          ### Files Generated
          - \`resources.${{ inputs.output_format || github.event.inputs.output_format || 'json' }}\` - Discovered resources
          - \`drift.${{ inputs.output_format || github.event.inputs.output_format || 'json' }}\` - Drift analysis results
          
          ### Next Steps
          1. Review the drift report for any critical issues
          2. Investigate and remediate any unexpected changes
          3. Update your Terraform state if changes are intentional
          4. Consider implementing drift prevention measures
          
          EOF
          
      - name: Upload drift reports
        uses: actions/upload-artifact@v4
        with:
          name: drift-reports-${{ github.run_number }}
          path: ${{ env.OUTPUT_DIR }}/
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const summaryPath = path.join('${{ env.OUTPUT_DIR }}', 'summary.md');
            let summary = '';
            
            if (fs.existsSync(summaryPath)) {
              summary = fs.readFileSync(summaryPath, 'utf8');
            } else {
              summary = '## DriftMgr Check Complete\n\nDrift analysis completed. Check the uploaded artifacts for detailed reports.';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
            
      - name: Send notification on critical drift
        if: failure()
        run: |
          echo "Critical drift detected! Check the uploaded reports for details."
          # Add your notification logic here (Slack, email, etc.)
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Critical drift detected in ${{ github.repository }}"}'

  drift-dashboard:
    name: Generate Drift Dashboard
    runs-on: ubuntu-latest
    needs: drift-check
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download drift reports
        uses: actions/download-artifact@v4
        with:
          name: drift-reports-${{ needs.drift-check.outputs.run_number || github.run_number }}
          path: drift-reports/
          
      - name: Generate HTML dashboard
        run: |
          # This would generate a more comprehensive HTML dashboard
          # combining multiple reports and providing interactive features
          echo "Generating HTML dashboard..."
          
          # Create a simple dashboard if HTML format was requested
          if [ -f "drift-reports/drift.html" ]; then
            cp drift-reports/drift.html drift-reports/dashboard.html
          else
            # Generate a basic dashboard
            cat > drift-reports/dashboard.html << 'EOF'
            <!DOCTYPE html>
            <html>
            <head>
                <title>DriftMgr Dashboard</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .header { background-color: #f5f5f5; padding: 20px; border-radius: 5px; }
                    .summary { margin: 20px 0; }
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>DriftMgr Dashboard</h1>
                    <p>Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")</p>
                </div>
                <div class="summary">
                    <h2>Drift Analysis Complete</h2>
                    <p>Check the uploaded artifacts for detailed reports.</p>
                </div>
            </body>
            </html>
            EOF
          fi
          
      - name: Upload dashboard
        uses: actions/upload-artifact@v4
        with:
          name: drift-dashboard-${{ github.run_number }}
          path: drift-reports/dashboard.html
          retention-days: 30
