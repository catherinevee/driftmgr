name: Dependency Management

on:
  schedule:
    # Run dependency updates weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of dependency update'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all
      create_pr:
        description: 'Create pull request for updates'
        required: false
        default: true
        type: boolean

env:
  GO_VERSION: '1.23.8'

jobs:
  dependency_scan:
    name: Scan Dependencies
    runs-on: ubuntu-latest
    
    outputs:
      vulnerabilities_found: ${{ steps.scan.outputs.vulnerabilities_found }}
      outdated_count: ${{ steps.scan.outputs.outdated_count }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

    - name: Download dependencies
      run: go mod download

    - name: Check for vulnerabilities with govulncheck
      id: vuln_check
      run: |
        # Install govulncheck
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run vulnerability scan
        if govulncheck ./... > vuln_report.txt 2>&1; then
          echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          echo "No vulnerabilities found"
        else
          echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          echo "Vulnerabilities detected!"
          cat vuln_report.txt
        fi

    - name: Upload vulnerability report
      if: steps.vuln_check.outputs.vulnerabilities_found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vuln_report.txt

    - name: Check for outdated dependencies
      id: scan
      run: |
        # Check for outdated Go modules
        echo "Checking for outdated Go dependencies..."
        
        # Get list of direct dependencies
        go list -m -u all > deps_check.txt
        
        # Count outdated dependencies (those with newer versions available)
        OUTDATED_COUNT=$(grep -c "=>" deps_check.txt || echo "0")
        echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
        echo "vulnerabilities_found=${{ steps.vuln_check.outputs.vulnerabilities_found }}" >> $GITHUB_OUTPUT
        
        if [ "$OUTDATED_COUNT" -gt 0 ]; then
          echo "Found $OUTDATED_COUNT outdated dependencies"
          grep "=>" deps_check.txt || true
        else
          echo "All dependencies are up to date"
        fi

    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: deps_check.txt

  update_dependencies:
    name: Update Dependencies
    needs: dependency_scan
    runs-on: ubuntu-latest
    if: needs.dependency_scan.outputs.outdated_count > 0 || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

    - name: Download current dependency scan
      uses: actions/download-artifact@v4
      with:
        name: dependency-scan-results

    - name: Update Go dependencies
      id: update
      env:
        UPDATE_TYPE: ${{ github.event.inputs.update_type || 'patch' }}
      run: |
        echo "Updating dependencies with type: $UPDATE_TYPE"
        
        # Backup current go.mod and go.sum
        cp go.mod go.mod.backup
        cp go.sum go.sum.backup
        
        case "$UPDATE_TYPE" in
          "patch")
            echo "Updating patch versions only..."
            go get -u=patch ./...
            ;;
          "minor")
            echo "Updating minor versions..."
            go get -u ./...
            ;;
          "major")
            echo "Updating to latest major versions (use with caution)..."
            # This is more complex and requires manual intervention for major version changes
            go list -m -u all | grep "=>" | while read -r line; do
              MODULE=$(echo "$line" | awk '{print $1}')
              LATEST=$(echo "$line" | awk '{print $4}' | tr -d '[]')
              echo "Considering update: $MODULE to $LATEST"
              # For major version updates, we'd typically want manual review
            done
            go get -u ./...
            ;;
          "all")
            echo "Updating all dependencies to latest versions..."
            go get -u ./...
            ;;
        esac
        
        # Clean up and verify
        go mod tidy
        go mod verify
        
        # Check if there were any changes
        if ! diff -q go.mod go.mod.backup > /dev/null || ! diff -q go.sum go.sum.backup > /dev/null; then
          echo "dependencies_updated=true" >> $GITHUB_OUTPUT
          echo "Dependencies were updated"
          
          # Generate update summary
          echo "## Dependency Updates" > update_summary.md
          echo "" >> update_summary.md
          echo "### Changed Dependencies" >> update_summary.md
          
          # Compare go.mod files to show what changed
          if command -v jd > /dev/null; then
            jd go.mod.backup go.mod >> update_summary.md || true
          else
            echo "Changes detected in go.mod and go.sum files" >> update_summary.md
          fi
          
        else
          echo "dependencies_updated=false" >> $GITHUB_OUTPUT
          echo "No dependency updates needed"
        fi

    - name: Run tests after updates
      if: steps.update.outputs.dependencies_updated == 'true'
      run: |
        echo "Running tests to ensure updates don't break functionality..."
        go test ./...

    - name: Run vulnerability scan after updates
      if: steps.update.outputs.dependencies_updated == 'true'
      run: |
        echo "Re-running vulnerability scan after updates..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./... || echo "Vulnerabilities still present after updates"

    - name: Create Pull Request
      if: steps.update.outputs.dependencies_updated == 'true' && (github.event.inputs.create_pr != 'false')
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: |
          chore(deps): update Go dependencies (${{ github.event.inputs.update_type || 'patch' }})
          
          - Updated dependencies using ${{ github.event.inputs.update_type || 'patch' }} update strategy
          - All tests passing after updates
          - Vulnerability scan completed
        title: 'chore(deps): Update Go dependencies (${{ github.event.inputs.update_type || 'patch' }})'
        body: |
          ## Dependency Updates
          
          This PR updates Go dependencies using the **${{ github.event.inputs.update_type || 'patch' }}** update strategy.
          
          ### Changes Made
          - Updated Go modules using `go get -u` strategy
          - Ran `go mod tidy` to clean up
          - Verified all modules with `go mod verify`
          - Ran full test suite to ensure compatibility
          
          ### Validation
          - All tests pass
          - Module verification successful
          - Vulnerability scan completed
          
          ### Review Notes
          - This PR was automatically generated by the dependency update workflow
          - Please review the changes and test in your environment before merging
          - Consider the impact of any major version updates
          
          **Triggered by:** ${{ github.event_name }}
          **Update type:** ${{ github.event.inputs.update_type || 'patch' }}
        branch: automated/dependency-updates-${{ github.run_id }}
        labels: |
          dependencies
          automated
          ${{ github.event.inputs.update_type || 'patch' }}-update

  docker_dependency_scan:
    name: Scan Docker Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile
        load: true
        tags: driftmgr:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'driftmgr:scan'
        format: 'sarif'
        output: 'docker-trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: 'driftmgr:scan'
        format: sarif
        output-file: 'docker-grype-results.sarif'

    - name: Upload Grype scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-grype-results.sarif'

  license_compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check licenses
      run: |
        echo "Checking license compliance..."
        
        # Generate license report
        go-licenses report ./... > license_report.txt
        
        # Check for forbidden licenses
        FORBIDDEN_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-3.0" "LGPL-2.1" "LGPL-3.0")
        
        for license in "${FORBIDDEN_LICENSES[@]}"; do
          if grep -q "$license" license_report.txt; then
            echo "ERROR: Forbidden license detected: $license"
            grep "$license" license_report.txt
            exit 1
          fi
        done
        
        echo "OK: No forbidden licenses detected"

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license_report.txt

  notify:
    name: Notify Results
    needs: [dependency_scan, update_dependencies, docker_dependency_scan, license_compliance]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Prepare notification
      id: prepare
      run: |
        # Aggregate results
        VULN_FOUND="${{ needs.dependency_scan.outputs.vulnerabilities_found }}"
        OUTDATED_COUNT="${{ needs.dependency_scan.outputs.outdated_count }}"
        DEPS_UPDATED="${{ needs.update_dependencies.outputs.dependencies_updated }}"
        
        if [ "$VULN_FOUND" = "true" ]; then
          STATUS="WARNING: VULNERABILITIES DETECTED"
          COLOR="warning"
        elif [ "$OUTDATED_COUNT" -gt 0 ]; then
          STATUS="INFO: UPDATES AVAILABLE"
          COLOR="good"
        else
          STATUS="OK: ALL DEPENDENCIES UP TO DATE"
          COLOR="good"
        fi
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "color=$COLOR" >> $GITHUB_OUTPUT
        echo "vulnerabilities=$VULN_FOUND" >> $GITHUB_OUTPUT
        echo "outdated_count=$OUTDATED_COUNT" >> $GITHUB_OUTPUT

    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.prepare.outputs.status }}
        color: ${{ steps.prepare.outputs.color }}
        text: |
          Dependency Scan Results:
          - Vulnerabilities: ${{ steps.prepare.outputs.vulnerabilities }}
          - Outdated packages: ${{ steps.prepare.outputs.outdated_count }}
          - Action: ${{ github.event_name }}
          - Repository: ${{ github.repository }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Create security issue for vulnerabilities
      if: needs.dependency_scan.outputs.vulnerabilities_found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `Security Alert: Vulnerabilities detected in dependencies - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Security Vulnerability Alert
          
          Vulnerabilities have been detected in project dependencies during the automated security scan.
          
          ### Action Required
          1. Review the vulnerability report in the workflow artifacts
          2. Update affected dependencies to secure versions
          3. Run security tests to verify fixes
          4. Consider implementing additional security measures
          
          ### Scan Details
          - **Scan Date**: ${new Date().toISOString()}
          - **Workflow Run**: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - **Triggered By**: ${{ github.event_name }}
          
          This issue was automatically created by the dependency management workflow.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'dependencies', 'vulnerability', 'automated']
          });