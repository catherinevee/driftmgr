name: Test Coverage

on:
  push:
    branches: [ main, develop, 'fix/**', 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better blame information

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      run: |
        echo "Running tests with coverage..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./... -timeout 60s || true

        # Also generate coverage for specific packages that might timeout
        go test -coverprofile=pkg_coverage.out -covermode=atomic \
          ./internal/events \
          ./internal/drift/detector \
          ./internal/providers/aws \
          ./internal/providers/digitalocean \
          ./internal/api/handlers \
          ./internal/cli \
          -timeout 30s 2>/dev/null || true

        # Merge coverage files if both exist
        if [ -f pkg_coverage.out ] && [ -f coverage.out ]; then
          echo "mode: atomic" > combined_coverage.out
          tail -n +2 coverage.out >> combined_coverage.out 2>/dev/null || true
          tail -n +2 pkg_coverage.out >> combined_coverage.out 2>/dev/null || true
          mv combined_coverage.out coverage.out
        fi

    - name: Generate coverage report
      run: |
        echo "Generating coverage report..."
        go tool cover -html=coverage.out -o coverage.html || true
        go tool cover -func=coverage.out | tail -10 || echo "Coverage report generation skipped"

    # Codecov GitHub Action v4 - follows latest best practices
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}  # Required for private repos and reliable uploads
        files: ./coverage.out
        flags: unittests
        name: codecov-${{ github.run_id }}
        fail_ci_if_error: false  # Don't fail CI if codecov upload fails
        verbose: true
        # Additional recommended settings
        handle_no_reports_found: true
        plugin: noop  # Disable unnecessary plugins
        os: linux
        arch: x86_64
        # For better PR comments
        override_branch: ${{ github.head_ref }}
        override_commit: ${{ github.event.pull_request.head.sha }}
        override_pr: ${{ github.event.pull_request.number }}

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload artifacts even if tests fail
      with:
        name: coverage-report-${{ github.run_id }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30

  # Additional job for Windows testing (optional but recommended)
  test-windows:
    name: Test Windows
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests with coverage
      shell: bash
      run: |
        go test -v -coverprofile=coverage_windows.out -covermode=atomic ./... -timeout 60s || true

    - name: Upload Windows coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage_windows.out
        flags: unittests,windows
        name: codecov-windows-${{ github.run_id }}
        fail_ci_if_error: false
        verbose: true
        os: windows
        arch: x86_64

  # Coverage gate job (optional - enforces minimum coverage)
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [test-coverage]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check coverage threshold
      run: |
        echo "Checking coverage threshold..."
        go test -coverprofile=coverage.out ./... 2>/dev/null || true

        # Extract coverage percentage
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"

        # Set minimum threshold (adjust as needed)
        THRESHOLD=10

        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
          # Don't fail for now, just warn
          echo "::warning::Coverage is below ${THRESHOLD}%"
        else
          echo "Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
        fi