name: Phase 2 - Remediation Engine Validation

on:
  push:
    paths: 
      - 'internal/api/remediation/**'
      - 'internal/remediation/**'
      - 'internal/jobs/**'
      - 'tests/api/remediation/**'
      - 'tests/integration/remediation/**'
  pull_request:
    paths: 
      - 'internal/api/remediation/**'
      - 'internal/remediation/**'
      - 'internal/jobs/**'
      - 'tests/api/remediation/**'
      - 'tests/integration/remediation/**'

env:
  GO_VERSION: '1.21'
  COVERAGE_THRESHOLD: 90

jobs:
  # Code Quality Checks
  lint:
    name: Code Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          go test ./internal/api/remediation/... -v -race -coverprofile=coverage.out -covermode=atomic
          go test ./internal/remediation/... -v -race -coverprofile=coverage2.out -covermode=atomic
          go test ./internal/jobs/... -v -race -coverprofile=coverage3.out -covermode=atomic

      - name: Merge coverage reports
        run: |
          echo "mode: atomic" > coverage_merged.out
          grep -h -v "^mode:" coverage.out coverage2.out coverage3.out >> coverage_merged.out

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=coverage_merged.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: ${coverage}%"
          if (( $(echo "$coverage < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Coverage ${coverage}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage_merged.out
          flags: phase2
          name: phase2-coverage

  # Job Queue Tests
  job-queue-tests:
    name: Job Queue Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run job queue tests
        env:
          REDIS_URL: redis://localhost:6379
        run: |
          go test ./internal/jobs/... -v -race

  # API Integration Tests
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, job-queue-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: driftmgr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run API tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/driftmgr_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
          API_PORT: 8080
        run: |
          go test ./tests/api/remediation/... -v -timeout=15m

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: driftmgr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Run performance tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/driftmgr_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
        run: |
          go test ./tests/performance/remediation/... -v -timeout=10m

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./internal/api/remediation/... ./internal/remediation/... ./internal/jobs/...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [unit-tests, job-queue-tests, api-tests, performance-tests, security-tests]
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags="-s -w" -o driftmgr-${{ matrix.os }}-${{ matrix.arch }} ./cmd/server

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: driftmgr-phase2-${{ matrix.os }}-${{ matrix.arch }}
          path: driftmgr-${{ matrix.os }}-${{ matrix.arch }}

  # Documentation Tests
  docs-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Check API documentation
        run: |
          go run ./scripts/check-api-docs.go --phase=2

      - name: Generate API documentation
        run: |
          go run ./scripts/generate-api-docs.go --phase=2

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: phase2-api-docs
          path: docs/api/phase2/

  # Phase 2 Validation Summary
  phase2-summary:
    name: Phase 2 Validation Summary
    runs-on: ubuntu-latest
    needs: [build, docs-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create validation report
        run: |
          echo "# Phase 2 Validation Report" > validation-report.md
          echo "" >> validation-report.md
          echo "## Test Results" >> validation-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> validation-report.md
          echo "- Job Queue Tests: ${{ needs.job-queue-tests.result }}" >> validation-report.md
          echo "- API Tests: ${{ needs.api-tests.result }}" >> validation-report.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> validation-report.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> validation-report.md
          echo "- Build: ${{ needs.build.result }}" >> validation-report.md
          echo "- Documentation: ${{ needs.docs-tests.result }}" >> validation-report.md
          echo "" >> validation-report.md
          echo "## Phase 2 Status" >> validation-report.md
          if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.job-queue-tests.result }}" == "success" && "${{ needs.api-tests.result }}" == "success" && "${{ needs.performance-tests.result }}" == "success" && "${{ needs.security-tests.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.docs-tests.result }}" == "success" ]]; then
            echo "✅ **PHASE 2 COMPLETE** - All validation checks passed" >> validation-report.md
          else
            echo "❌ **PHASE 2 INCOMPLETE** - Some validation checks failed" >> validation-report.md
          fi

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: phase2-validation-report
          path: validation-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
