name: Infrastructure Drift Check

on:
  pull_request:
    branches: [ main, develop ]
    paths:
    - '**/*.tf'
    - '**/*.tfvars'
    - '**/terraform/**'
  push:
    branches: [ main, develop ]
    paths:
    - '**/*.tf'
    - '**/*.tfvars'
    - '**/terraform/**'
  schedule:
  # Run daily at 2 AM UTC
  - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  DRIFT_CONFIG_FILE: driftmgr.yaml
  DRIFT_OUTPUT_FORMAT: json
  DRIFT_FAIL_ON_DRIFT: true
  DRIFT_AUTO_REMEDIATE: false

jobs:
  drift-detection:
    name: Detect Infrastructure Drift
    runs-on: ubuntu-latest

    strategy:
      matrix:
        provider: [ aws, azure, gcp ]
        include:
        - provider: aws
          regions: us-east-1,us-west-2
        - provider: azure
          regions: eastus,westus
        - provider: gcp
          regions: us-central1,us-east1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install DriftMgr
      run: |
        git clone https://github.com/catherinevee/driftmgr.git
        cd driftmgr
        make build
        sudo cp bin/driftmgr /usr/local/bin/
        sudo cp bin/driftmgr-client /usr/local/bin/

    - name: Configure AWS credentials
      if: matrix.provider == 'aws'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Configure Azure credentials
      if: matrix.provider == 'azure'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Configure GCP credentials
      if: matrix.provider == 'gcp'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Create DriftMgr config
      run: |
        cat > driftmgr.yaml << EOF
        providers:
          ${{ matrix.provider }}:
            regions: [${{ matrix.regions }}]
        ci_cd:
          enabled: true
          fail_on_drift: ${{ env.DRIFT_FAIL_ON_DRIFT == 'true' }}
          auto_remediate: ${{ env.DRIFT_AUTO_REMEDIATE == 'true' }}
          severity_threshold: high
        EOF

    - name: Discover resources
      run: |
        echo "Discovering ${{ matrix.provider }} resources in regions: ${{ matrix.regions }}"
        driftmgr discover ${{ matrix.provider }} ${{ matrix.regions }}

    - name: Analyze drift
      id: analyze
      run: |
        echo "Analyzing drift for ${{ matrix.provider }}"
        driftmgr analyze terraform.tfstate --output ${{ env.DRIFT_OUTPUT_FORMAT }} > drift-report-${{ matrix.provider }}.json

        # Parse drift count from JSON output
        DRIFT_COUNT=$(jq '.drift_count // 0' drift-report-${{ matrix.provider }}.json)
        echo "drift_count=$DRIFT_COUNT" >> $GITHUB_OUTPUT

        if [ "$DRIFT_COUNT" -gt 0 ]; then
          echo "❌ Drift detected: $DRIFT_COUNT resources"
          exit 1
        else
          echo "✅ No drift detected"
        fi

    - name: Upload drift report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: drift-report-${{ matrix.provider }}
        path: drift-report-${{ matrix.provider }}.json
        retention-days: 30

    - name: Send notification
      if: failure() && matrix.provider == 'aws'
      run: |
        driftmgr notify slack "Drift Alert" "Drift detected in ${{ matrix.provider }} infrastructure"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  drift-remediation:
    name: Remediate Drift
    runs-on: ubuntu-latest
    needs: drift-detection
    if: failure() && github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install DriftMgr
      run: |
        git clone https://github.com/catherinevee/driftmgr.git
        cd driftmgr
        make build
        sudo cp bin/driftmgr /usr/local/bin/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Download drift reports
      uses: actions/download-artifact@v3
      with:
        pattern: drift-report-*

    - name: Remediate drift
      run: |
        echo "Remediating detected drift"
        driftmgr remediate-batch terraform --auto

    - name: Verify remediation
      run: |
        echo "Verifying remediation"
        driftmgr discover aws us-east-1,us-west-2
        driftmgr analyze terraform.tfstate

    - name: Send remediation notification
      run: |
        driftmgr notify slack "Remediation Complete" "Drift remediation completed successfully"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
