version: '3.8'

services:
  driftmgr:
    build:
      context: .
      dockerfile: Dockerfile
    image: driftmgr:latest
    container_name: driftmgr
    restart: unless-stopped
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port
    environment:
      # Database configuration
      - DB_HOST=postgres
      - DB_USER=driftmgr
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - DB_NAME=driftmgr
      
      # AWS credentials (optional - use IAM role in production)
      - AWS_PROFILE=${AWS_PROFILE:-}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      
      # Azure credentials (optional - use managed identity in production)
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID:-}
      
      # GCP credentials (optional - use service account in production)
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-}
      
      # Security
      - JWT_SECRET=${JWT_SECRET:-changeme}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-changeme}
      
      # Monitoring
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
    volumes:
      - ./configs/production.yaml:/etc/driftmgr/config.yaml:ro
      - driftmgr-data:/var/lib/driftmgr
      - driftmgr-logs:/var/log/driftmgr
    networks:
      - driftmgr-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    container_name: driftmgr-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=driftmgr
      - POSTGRES_USER=driftmgr
      - POSTGRES_PASSWORD=${DB_PASSWORD:-changeme}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - driftmgr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U driftmgr"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: driftmgr-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - driftmgr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: driftmgr-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Accept traces
    networks:
      - driftmgr-network

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: driftmgr-prometheus
    restart: unless-stopped
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9091:9090"  # Prometheus UI
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - driftmgr-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: driftmgr-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"  # Grafana UI
    networks:
      - driftmgr-network
    depends_on:
      - prometheus

networks:
  driftmgr-network:
    driver: bridge

volumes:
  driftmgr-data:
  driftmgr-logs:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: