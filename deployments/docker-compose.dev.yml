version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: driftmgr-postgres
    environment:
      POSTGRES_DB: driftmgr_dev
      POSTGRES_USER: driftmgr
      POSTGRES_PASSWORD: driftmgr_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U driftmgr -d driftmgr_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - driftmgr-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: driftmgr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - driftmgr-network

  # DriftMgr API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: driftmgr-api
    environment:
      - DATABASE_URL=postgres://driftmgr:driftmgr_dev_password@postgres:5432/driftmgr_dev?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - API_PORT=8080
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - /app/bin
      - /app/coverage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - driftmgr-network
    command: ["go", "run", "./cmd/server/main.go"]

  # DriftMgr Web Dashboard
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: driftmgr-web
    environment:
      - API_URL=http://api:8080
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./web:/app/web
    depends_on:
      - api
    networks:
      - driftmgr-network
    command: ["npm", "run", "dev"]

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: driftmgr-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - driftmgr-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: driftmgr-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - driftmgr-network

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: driftmgr-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - driftmgr-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: driftmgr-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - driftmgr-network

  # Kibana for Log Analysis
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: driftmgr-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - driftmgr-network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: driftmgr-logstash
    volumes:
      - ./configs/logstash/pipeline:/usr/share/logstash/pipeline
      - ./configs/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - driftmgr-network

  # MinIO for S3-compatible storage (for testing)
  minio:
    image: minio/minio:latest
    container_name: driftmgr-minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - driftmgr-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: driftmgr-mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - driftmgr-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: driftmgr-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - web
    networks:
      - driftmgr-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local

networks:
  driftmgr-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
